//==-- TMS320C64XSubtarget.h - Define Subtarget for TMS320C64X --*- C++ -*--==//
//
// Copyright 2010 Jeremy Morse <jeremy.morse@gmail.com>. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY JEREMY MORSE ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL JEREMY MORSE OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//===----------------------------------------------------------------------===//

#ifndef LLVM_TARGET_TMS320C64X_SUBTARGET_H
#define LLVM_TARGET_TMS320C64X_SUBTARGET_H

#include "llvm/Target/TargetInstrItineraries.h"
#include "llvm/Target/TargetSubtarget.h"
#include <string>

namespace llvm {

class TMS320C64XSubtarget : public TargetSubtarget {

   InstrItineraryData InstrItins;

   bool HasMPY32;
   bool DoILP;


   /// This function is autogenerated by tblgen.
   std::string ParseSubtargetFeatures(const std::string &,
                                      const std::string &);

  public:

    TMS320C64XSubtarget(const std::string &TT,
                        const std::string &FS);

    /// getInstrItins - Return the instruction itinerary.
    const InstrItineraryData &getInstrItineraryData() const {
      return InstrItins;
    }

    // enablePostRAScheduler - true when we compile for ILP.
    bool enablePostRAScheduler(CodeGenOpt::Level OptLevel,
        AntiDepBreakMode& Mode,
        RegClassVector& CriticalPathRCs) const {
      // we don't care about options, it's either on or off
      return enablePostRAScheduler();
    }

    bool enablePostRAScheduler() const {
      return DoILP;
    }

    bool enableClusterAssignment() const {
      return DoILP;
    }
};

} // llvm namespace

#endif  // LLVM_TARGET_TMS320C64X_SUBTARGET_H
